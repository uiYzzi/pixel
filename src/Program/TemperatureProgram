#include <stdlib.h>
#include <time.h>
#include <DHT.h>
#include "../asset/Img.h"
#include "BaseProgram.h"
#include "drivers/LEDMatrix.h"
#include "config.h"

class TemperatureProgram : public BaseProgram
{
public:
    TemperatureProgram(LEDMatrix &screen,DHT &dht) : screen_{screen}, dht_{dht} {        updateInterval = 2000; // 新增一个变量来定义更新的时间间隔，单位毫秒
    }
    
    void begin() override{
        unsigned long now = millis(); // 获取当前时间
        updateTemperature(now);
    }

    void updateTemperature(int now)
    {
        t = dht_.readTemperature();    // 读取湿度值

        if (isnan(t)) {      // 如果读取失败，则退出update函数
            Serial.println("Failed to read from DHT sensor!");
            return;
        }
        dtostrf(t, 4, 1, tempStr); // 将浮点数转换为字符串，保留1位小数
        Serial.print("Temperature：");
        Serial.println(t);
        lastUpdate = now; // 更新上一次更新的时间
    }

    void update(float bright) override
    {
        unsigned long now = millis(); // 获取当前时间
        if (now - lastUpdate >= updateInterval)
        { // 如果已经过了更新的时间间隔
            updateTemperature(now);
        }
        // 在LED矩阵上显示温度
        screen_.fill(); // 清空LED矩阵
        screen_.drawImage(0,0,img_temperature,0,bright);
        screen_.drawChar(tempStr[0], 8, 0, 255, 0, 0, bright); // 显示温度第一位数字（红色，亮度100%）
        screen_.drawChar(tempStr[1], 12, 0, 255, 0, 0, bright); // 显示温度第二位数字（红色，亮度100%）
        screen_.drawChar(tempStr[2], 16, 0, 255, 0, 0, bright); // 显示温度小数点（红色，亮度100%）
        screen_.drawChar(tempStr[3], 20, 0, 255, 0, 0, bright); // 显示温度第三位数字（红色，亮度100%）
        screen_.drawChar('C', 24, 0, 255, 0, 0, 0.5); // 显示温度单位（红色，亮度50%）
        screen_.show();
    }

private:
    float t;
    char tempStr[6];
    unsigned long lastUpdate;     // 新增一个变量来记录上一次更新的时间
    unsigned long updateInterval; // 新增一个变量来定义更新的时间间隔，单位毫秒
    LEDMatrix &screen_;
    DHT &dht_;
};
